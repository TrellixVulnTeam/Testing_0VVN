{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["const defLimit = require('os').cpus().length\nconst callLimit = (queue, limit = defLimit) => new Promise((res, rej) => {\n  let active = 0\n  let current = 0\n  const results = []\n\n  let rejected = false\n  const reject = er => {\n    if (rejected)\n      return\n    rejected = true\n    rej(er)\n  }\n\n  let resolved = false\n  const resolve = () => {\n    if (resolved || active > 0)\n      return\n    resolved = true\n    res(results)\n  }\n\n  const run = () => {\n    const c = current++\n    if (c >= queue.length) {\n      return resolve()\n    }\n\n    active ++\n    results[c] = queue[c]().then(result => {\n      active --\n      results[c] = result\n      run()\n      return result\n    }, reject)\n  }\n\n  for (let i = 0; i < limit; i++) {\n    run()\n  }\n})\n\nmodule.exports = callLimit\n"]}