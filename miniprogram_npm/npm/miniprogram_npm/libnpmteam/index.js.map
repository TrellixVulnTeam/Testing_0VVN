{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nconst eu = encodeURIComponent\nconst npmFetch = require('npm-registry-fetch')\nconst validate = require('aproba')\n\nconst cmd = module.exports\n\ncmd.create = (entity, opts = {}) => {\n  return Promise.resolve().then(() => {\n    const { scope, team } = splitEntity(entity)\n    validate('SSO', [scope, team, opts])\n    const uri = `/-/org/${eu(scope)}/team`\n    return npmFetch.json(uri, {\n      ...opts,\n      method: 'PUT',\n      scope,\n      body: { name: team, description: opts.description },\n    })\n  })\n}\n\ncmd.destroy = (entity, opts = {}) => {\n  const { scope, team } = splitEntity(entity)\n  validate('SSO', [scope, team, opts])\n  const uri = `/-/team/${eu(scope)}/${eu(team)}`\n  return npmFetch.json(uri, {\n    ...opts,\n    method: 'DELETE',\n    scope,\n  })\n}\n\ncmd.add = (user, entity, opts = {}) => {\n  const { scope, team } = splitEntity(entity)\n  validate('SSO', [scope, team, opts])\n  const uri = `/-/team/${eu(scope)}/${eu(team)}/user`\n  return npmFetch.json(uri, {\n    ...opts,\n    method: 'PUT',\n    scope,\n    body: { user },\n  })\n}\n\ncmd.rm = (user, entity, opts = {}) => {\n  const { scope, team } = splitEntity(entity)\n  validate('SSO', [scope, team, opts])\n  const uri = `/-/team/${eu(scope)}/${eu(team)}/user`\n  return npmFetch.json(uri, {\n    ...opts,\n    method: 'DELETE',\n    scope,\n    body: { user },\n  })\n}\n\ncmd.lsTeams = (...args) => cmd.lsTeams.stream(...args).collect()\n\ncmd.lsTeams.stream = (scope, opts = {}) => {\n  validate('SO', [scope, opts])\n  const uri = `/-/org/${eu(scope)}/team`\n  return npmFetch.json.stream(uri, '.*', {\n    ...opts,\n    query: { format: 'cli' },\n  })\n}\n\ncmd.lsUsers = (...args) => cmd.lsUsers.stream(...args).collect()\n\ncmd.lsUsers.stream = (entity, opts = {}) => {\n  const { scope, team } = splitEntity(entity)\n  validate('SSO', [scope, team, opts])\n  const uri = `/-/team/${eu(scope)}/${eu(team)}/user`\n  return npmFetch.json.stream(uri, '.*', {\n    ...opts,\n    query: { format: 'cli' },\n  })\n}\n\ncmd.edit = () => {\n  throw new Error('edit is not implemented yet')\n}\n\nfunction splitEntity (entity = '') {\n  const [, scope, team] = entity.match(/^@?([^:]+):(.*)$/) || []\n  return { scope, team }\n}\n"]}