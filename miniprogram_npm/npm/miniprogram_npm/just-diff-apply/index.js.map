{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["module.exports = {\n  diffApply: diffApply,\n  jsonPatchPathConverter: jsonPatchPathConverter,\n};\n\n/*\n  const obj1 = {a: 3, b: 5};\n  diffApply(obj1,\n    [\n      { \"op\": \"remove\", \"path\": ['b'] },\n      { \"op\": \"replace\", \"path\": ['a'], \"value\": 4 },\n      { \"op\": \"add\", \"path\": ['c'], \"value\": 5 }\n    ]\n  );\n  obj1; // {a: 4, c: 5}\n\n  // using converter to apply jsPatch standard paths\n  // see http://jsonpatch.com\n  import {diff, jsonPatchPathConverter} from 'just-diff'\n  const obj2 = {a: 3, b: 5};\n  diffApply(obj2, [\n    { \"op\": \"remove\", \"path\": '/b' },\n    { \"op\": \"replace\", \"path\": '/a', \"value\": 4 }\n    { \"op\": \"add\", \"path\": '/c', \"value\": 5 }\n  ], jsonPatchPathConverter);\n  obj2; // {a: 4, c: 5}\n\n  // arrays\n  const obj3 = {a: 4, b: [1, 2, 3]};\n  diffApply(obj3, [\n    { \"op\": \"replace\", \"path\": ['a'], \"value\": 3 }\n    { \"op\": \"replace\", \"path\": ['b', 2], \"value\": 4 }\n    { \"op\": \"add\", \"path\": ['b', 3], \"value\": 9 }\n  ]);\n  obj3; // {a: 3, b: [1, 2, 4, 9]}\n\n  // nested paths\n  const obj4 = {a: 4, b: {c: 3}};\n  diffApply(obj4, [\n    { \"op\": \"replace\", \"path\": ['a'], \"value\": 5 }\n    { \"op\": \"remove\", \"path\": ['b', 'c']}\n    { \"op\": \"add\", \"path\": ['b', 'd'], \"value\": 4 }\n  ]);\n  obj4; // {a: 5, b: {d: 4}}\n*/\n\nvar REMOVE = 'remove';\nvar REPLACE = 'replace';\nvar ADD = 'add';\n\nfunction diffApply(obj, diff, pathConverter) {\n  if (!obj || typeof obj != 'object') {\n    throw new Error('base object must be an object or an array');\n  }\n\n  if (!Array.isArray(diff)) {\n    throw new Error('diff must be an array');\n  }\n\n  var diffLength = diff.length;\n  for (var i = 0; i < diffLength; i++) {\n    var thisDiff = diff[i];\n    var subObject = obj;\n    var thisOp = thisDiff.op;\n    var thisPath = thisDiff.path;\n    if (pathConverter) {\n      thisPath = pathConverter(thisPath);\n      if (!Array.isArray(thisPath)) {\n        throw new Error('pathConverter must return an array');\n      }\n    } else {\n      if (!Array.isArray(thisPath)) {\n        throw new Error('diff path must be an array, consider supplying a path converter');\n      }\n    }\n    var pathCopy = thisPath.slice();\n    var lastProp = pathCopy.pop();\n    if (lastProp == null) {\n      return false;\n    }\n    var thisProp;\n    while (((thisProp = pathCopy.shift())) != null) {\n      if (!(thisProp in subObject)) {\n        subObject[thisProp] = {};\n      }\n      subObject = subObject[thisProp];\n    }\n    if (thisOp === REMOVE || thisOp === REPLACE) {\n      if (!subObject.hasOwnProperty(lastProp)) {\n        throw new Error(['expected to find property', thisDiff.path, 'in object', obj].join(' '));\n      }\n    }\n    if (thisOp === REMOVE) {\n      Array.isArray(subObject) ? subObject.splice(lastProp, 1) : delete subObject[lastProp];\n    }\n    if (thisOp === REPLACE || thisOp === ADD) {\n      subObject[lastProp] = thisDiff.value;\n    }\n  }\n  return subObject;\n}\n\nfunction jsonPatchPathConverter(stringPath) {\n  return stringPath.split('/').slice(1);\n}\n"]}