{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nconst stringWidth = require('string-width');\nconst stripAnsi = require('strip-ansi');\n\nconst concat = Array.prototype.concat;\nconst defaults = {\n\tcharacter: ' ',\n\tnewline: '\\n',\n\tpadding: 2,\n\tsort: true,\n\twidth: 0,\n};\n\nfunction byPlainText(a, b) {\n\tconst plainA = stripAnsi(a);\n\tconst plainB = stripAnsi(b);\n\n\tif (plainA === plainB) {\n\t\treturn 0;\n\t}\n\n\tif (plainA > plainB) {\n\t\treturn 1;\n\t}\n\n\treturn -1;\n}\n\nfunction makeArray() {\n\treturn [];\n}\n\nfunction makeList(count) {\n\treturn Array.apply(null, Array(count));\n}\n\nfunction padCell(fullWidth, character, value) {\n\tconst valueWidth = stringWidth(value);\n\tconst filler = makeList(fullWidth - valueWidth + 1);\n\n\treturn value + filler.join(character);\n}\n\nfunction toRows(rows, cell, i) {\n\trows[i % rows.length].push(cell);\n\n\treturn rows;\n}\n\nfunction toString(arr) {\n\treturn arr.join('');\n}\n\nfunction columns(values, options) {\n\tvalues = concat.apply([], values);\n\toptions = Object.assign({}, defaults, options);\n\n\tlet cells = values.filter(Boolean).map(String);\n\n\tif (options.sort !== false) {\n\t\tcells = cells.sort(byPlainText);\n\t}\n\n\tconst termWidth = options.width || process.stdout.columns;\n\tconst cellWidth =\n\t\tMath.max.apply(null, cells.map(stringWidth)) + options.padding;\n\tconst columnCount = Math.floor(termWidth / cellWidth) || 1;\n\tconst rowCount = Math.ceil(cells.length / columnCount) || 1;\n\n\tif (columnCount === 1) {\n\t\treturn cells.join(options.newline);\n\t}\n\n\treturn cells\n\t\t.map(padCell.bind(null, cellWidth, options.character))\n\t\t.reduce(toRows, makeList(rowCount).map(makeArray))\n\t\t.map(toString)\n\t\t.join(options.newline);\n}\n\nmodule.exports = columns;\n"]}