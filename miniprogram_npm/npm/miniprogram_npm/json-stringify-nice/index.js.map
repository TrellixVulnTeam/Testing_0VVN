{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["const isObj = val => !!val && !Array.isArray(val) && typeof val === 'object'\n\nconst compare = (ak, bk, prefKeys) =>\n  prefKeys.includes(ak) && !prefKeys.includes(bk) ? -1\n  : prefKeys.includes(bk) && !prefKeys.includes(ak) ? 1\n  : prefKeys.includes(ak) && prefKeys.includes(bk)\n    ? prefKeys.indexOf(ak) - prefKeys.indexOf(bk)\n    : ak.localeCompare(bk, 'en')\n\nconst sort = (replacer, seen) => (key, val) => {\n  const prefKeys = Array.isArray(replacer) ? replacer : []\n\n  if (typeof replacer === 'function')\n    val = replacer(key, val)\n\n  if (!isObj(val))\n    return val\n\n  if (seen.has(val))\n    return seen.get(val)\n\n  const ret = Object.entries(val).sort(\n    ([ak, av], [bk, bv]) =>\n      isObj(av) === isObj(bv) ? compare(ak, bk, prefKeys)\n      : isObj(av) ? 1\n      : -1\n  ).reduce((set, [k, v]) => {\n    set[k] = v\n    return set\n  }, {})\n\n  seen.set(val, ret)\n  return ret\n}\n\nmodule.exports = (obj, replacer, space = 2) =>\n  JSON.stringify(obj, sort(replacer, new Map()), space)\n  + (space ? '\\n' : '')\n"]}