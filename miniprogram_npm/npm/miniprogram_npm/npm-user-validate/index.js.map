{"version":3,"sources":["npm-user-validate.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["exports.email = email\nexports.pw = pw\nexports.username = username\nvar requirements = exports.requirements = {\n  username: {\n    length: 'Name length must be less than or equal to 214 characters long',\n    lowerCase: 'Name must be lowercase',\n    urlSafe: 'Name may not contain non-url-safe chars',\n    dot: 'Name may not start with \".\"',\n    illegal: 'Name may not contain illegal character'\n  },\n  password: {},\n  email: {\n    length: 'Email length must be less then or equal to 254 characters long',\n    valid: 'Email must be an email address'\n  }\n}\n\nvar illegalCharacterRe = new RegExp('([' + [\n  \"'\"\n].join() + '])')\n\nfunction username (un) {\n  if (un !== un.toLowerCase()) {\n    return new Error(requirements.username.lowerCase)\n  }\n\n  if (un !== encodeURIComponent(un)) {\n    return new Error(requirements.username.urlSafe)\n  }\n\n  if (un.charAt(0) === '.') {\n    return new Error(requirements.username.dot)\n  }\n\n  if (un.length > 214) {\n    return new Error(requirements.username.length)\n  }\n\n  var illegal = un.match(illegalCharacterRe)\n  if (illegal) {\n    return new Error(requirements.username.illegal + ' \"' + illegal[0] + '\"')\n  }\n\n  return null\n}\n\nfunction email (em) {\n  if (em.length > 254) {\n    return new Error(requirements.email.length)\n  }\n  if (!em.match(/^[^@]+@.+\\..+$/)) {\n    return new Error(requirements.email.valid)\n  }\n\n  return null\n}\n\nfunction pw (pw) {\n  return null\n}\n"]}