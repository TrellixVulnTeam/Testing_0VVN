{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["const hasIntl = typeof Intl === 'object' && !!Intl\nconst Collator = hasIntl && Intl.Collator\nconst cache = new Map()\n\nconst collatorCompare = (locale, opts) => {\n  const collator = new Collator(locale, opts)\n  return (a, b) => collator.compare(a, b)\n}\n\nconst localeCompare = (locale, opts) => (a, b) => a.localeCompare(b, locale, opts)\n\nconst knownOptions = [\n  'sensitivity',\n  'numeric',\n  'ignorePunctuation',\n  'caseFirst',\n]\n\nconst { hasOwnProperty } = Object.prototype\n\nmodule.exports = (locale, options = {}) => {\n  if (!locale || typeof locale !== 'string')\n    throw new TypeError('locale required')\n\n  const opts = knownOptions.reduce((opts, k) => {\n    if (hasOwnProperty.call(options, k)) {\n      opts[k] = options[k]\n    }\n    return opts\n  }, {})\n  const key = `${locale}\\n${JSON.stringify(opts)}`\n\n  if (cache.has(key))\n    return cache.get(key)\n\n  const compare = hasIntl\n    ? collatorCompare(locale, opts)\n    : localeCompare(locale, opts)\n  cache.set(key, compare)\n\n  return compare\n}\n"]}