{"version":3,"sources":["index.js","update-dependencies.js","update-scripts.js","update-workspaces.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["const fs = require('fs')\nconst promisify = require('util').promisify\nconst readFile = promisify(fs.readFile)\nconst writeFile = promisify(fs.writeFile)\nconst { resolve } = require('path')\nconst updateDeps = require('./update-dependencies.js')\nconst updateScripts = require('./update-scripts.js')\nconst updateWorkspaces = require('./update-workspaces.js')\n\nconst parseJSON = require('json-parse-even-better-errors')\n\nconst _filename = Symbol('filename')\nconst _manifest = Symbol('manifest')\nconst _readFileContent = Symbol('readFileContent')\n\n// a list of handy specialized helper functions that take\n// care of special cases that are handled by the npm cli\nconst knownSteps = new Set([\n  updateDeps,\n  updateScripts,\n  updateWorkspaces,\n])\n\n// list of all keys that are handled by \"knownSteps\" helpers\nconst knownKeys = new Set([\n  ...updateDeps.knownKeys,\n  'scripts',\n  'workspaces',\n])\n\nclass PackageJson {\n  static async load (path) {\n    return await new PackageJson(path).load()\n  }\n\n  constructor (path) {\n    this[_filename] = resolve(path, 'package.json')\n    this[_manifest] = {}\n    this[_readFileContent] = ''\n  }\n\n  async load () {\n    try {\n      this[_readFileContent] =\n        await readFile(this[_filename], 'utf8')\n    } catch (err) {\n      throw new Error('package.json not found')\n    }\n\n    try {\n      this[_manifest] =\n        parseJSON(this[_readFileContent])\n    } catch (err) {\n      throw new Error(`Invalid package.json: ${err}`)\n    }\n\n    return this\n  }\n\n  get content () {\n    return this[_manifest]\n  }\n\n  update (content) {\n    // validates both current manifest and content param\n    const invalidContent =\n      typeof this[_manifest] !== 'object'\n        || typeof content !== 'object'\n    if (invalidContent) {\n      throw Object.assign(\n        new Error(`Can't update invalid package.json data`),\n        { code: 'EPACKAGEJSONUPDATE' }\n      )\n    }\n\n    for (const step of knownSteps)\n      this[_manifest] = step({ content, originalContent: this[_manifest] })\n\n    // unknown properties will just be overwitten\n    for (const [key, value] of Object.entries(content)) {\n      if (!knownKeys.has(key))\n        this[_manifest][key] = value\n    }\n\n    return this\n  }\n\n  async save () {\n    const {\n      [Symbol.for('indent')]: indent,\n      [Symbol.for('newline')]: newline,\n    } = this[_manifest]\n\n    const format = indent === undefined ? '  ' : indent\n    const eol = newline === undefined ? '\\n' : newline\n    const fileContent = `${\n      JSON.stringify(this[_manifest], null, format)\n    }\\n`\n      .replace(/\\n/g, eol)\n\n    if (fileContent.trim() !== this[_readFileContent].trim())\n      return await writeFile(this[_filename], fileContent)\n  }\n}\n\nmodule.exports = PackageJson\n","const depTypes = new Set([\n  'dependencies',\n  'optionalDependencies',\n  'devDependencies',\n  'peerDependencies',\n])\n\n// sort alphabetically all types of deps for a given package\nconst orderDeps = (content) => {\n  for (const type of depTypes) {\n    if (content && content[type]) {\n      content[type] = Object.keys(content[type])\n        .sort((a, b) => a.localeCompare(b, 'en'))\n        .reduce((res, key) => {\n          res[key] = content[type][key]\n          return res\n        }, {})\n    }\n  }\n  return content\n}\n\nconst updateDependencies = ({ content, originalContent }) => {\n  const pkg = orderDeps({\n    ...content,\n  })\n\n  // optionalDependencies don't need to be repeated in two places\n  if (pkg.dependencies) {\n    if (pkg.optionalDependencies) {\n      for (const name of Object.keys(pkg.optionalDependencies))\n        delete pkg.dependencies[name]\n    }\n  }\n\n  const result = { ...originalContent }\n\n  // loop through all types of dependencies and update package json pkg\n  for (const type of depTypes) {\n    if (pkg[type])\n      result[type] = pkg[type]\n\n    // prune empty type props from resulting object\n    const emptyDepType =\n      pkg[type]\n      && typeof pkg === 'object'\n      && Object.keys(pkg[type]).length === 0\n    if (emptyDepType)\n      delete result[type]\n  }\n\n  // if original package.json had dep in peerDeps AND deps, preserve that.\n  const { dependencies: origProd, peerDependencies: origPeer } =\n    originalContent || {}\n  const { peerDependencies: newPeer } = result\n  if (origProd && origPeer && newPeer) {\n    // we have original prod/peer deps, and new peer deps\n    // copy over any that were in both in the original\n    for (const name of Object.keys(origPeer)) {\n      if (origProd[name] !== undefined && newPeer[name] !== undefined) {\n        result.dependencies = result.dependencies || {}\n        result.dependencies[name] = newPeer[name]\n      }\n    }\n  }\n\n  return result\n}\n\nupdateDependencies.knownKeys = depTypes\n\nmodule.exports = updateDependencies\n","const updateScripts = ({ content, originalContent = {} }) => {\n  const newScripts = content.scripts\n\n  if (!newScripts)\n    return originalContent\n\n  // validate scripts content being appended\n  const hasInvalidScripts = () =>\n    Object.entries(newScripts)\n      .some(([key, value]) =>\n        typeof key !== 'string' || typeof value !== 'string')\n  if (hasInvalidScripts()) {\n    throw Object.assign(\n      new TypeError(\n        'package.json scripts should be a key-value pair of strings.'),\n      { code: 'ESCRIPTSINVALID' }\n    )\n  }\n\n  return {\n    ...originalContent,\n    scripts: {\n      ...newScripts,\n    },\n  }\n}\n\nmodule.exports = updateScripts\n","const updateWorkspaces = ({ content, originalContent = {} }) => {\n  const newWorkspaces = content.workspaces\n\n  if (!newWorkspaces)\n    return originalContent\n\n  // validate workspaces content being appended\n  const hasInvalidWorkspaces = () =>\n    newWorkspaces.some(w => !(typeof w === 'string'))\n  if (!newWorkspaces.length || hasInvalidWorkspaces()) {\n    throw Object.assign(\n      new TypeError('workspaces should be an array of strings.'),\n      { code: 'EWORKSPACESINVALID' }\n    )\n  }\n\n  return {\n    ...originalContent,\n    workspaces: [\n      ...newWorkspaces,\n    ],\n  }\n}\n\nmodule.exports = updateWorkspaces\n"]}