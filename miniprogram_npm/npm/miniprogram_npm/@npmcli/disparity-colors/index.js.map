{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["const ansi = require('ansi-styles')\n\nconst colors = {\n  removed: ansi.red,\n  added: ansi.green,\n  header: ansi.yellow,\n  section: ansi.magenta\n}\n\nfunction colorize (str, opts) {\n  let headerLength = (opts || {}).headerLength\n  if (typeof headerLength !== 'number' || Number.isNaN(headerLength)) {\n    headerLength = 2\n  }\n\n  const color = (str, colorId) => {\n    const { open, close } = colors[colorId]\n    // avoid highlighting the \"\\n\" (would highlight till the end of the line)\n    return str.replace(/[^\\n\\r]+/g, open + '$&' + close)\n  }\n\n  // this RegExp will include all the `\\n` chars into the lines, easier to join\n  const lines = ((typeof str === 'string' && str) || '').split(/^/m)\n\n  const start = color(lines.slice(0, headerLength).join(''), 'header')\n  const end = lines.slice(headerLength).join('')\n    .replace(/^-.*/gm, color('$&', 'removed'))\n    .replace(/^\\+.*/gm, color('$&', 'added'))\n    .replace(/^@@.+@@/gm, color('$&', 'section'))\n\n  return start + end\n}\n\nmodule.exports = colorize\n"]}