{"version":3,"sources":["index.js","lib/cli.js","lib/utils/unsupported.js","package.json","lib/utils/exit-handler.js","lib/utils/log-shim.js","lib/utils/error-message.js","lib/utils/path.js","lib/utils/replace-info.js","lib/utils/explain-eresolve.js","lib/utils/explain-dep.js","lib/utils/is-windows.js","lib/utils/update-notifier.js","lib/utils/did-you-mean.js","lib/utils/cmd-list.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,AGTA,AFMA,ACHA;AFOA,AGTA,AFMA,ACHA;AFOA,AGTA,AFMA,ACHA;AFOA,AGTA,ACHA,AHSA,ACHA;AFOA,AGTA,ACHA,AHSA,ACHA;AFOA,AGTA,ACHA,AHSA,ACHA;AFOA,AKfA,AFMA,ACHA,AHSA,ACHA;AFOA,AKfA,AFMA,ACHA,AHSA,ACHA;AFOA,AKfA,AFMA,ACHA,AHSA,ACHA;AFOA,AKfA,AFMA,ACHA,AENA,ALeA,ACHA;AFOA,AKfA,AFMA,ACHA,AENA,ALeA,ACHA;AFOA,AKfA,AFMA,ACHA,AENA,ALeA,ACHA;AFOA,AKfA,AFMA,ACHA,AENA,ACHA,ANkBA,ACHA;AFOA,AKfA,AFMA,ACHA,AENA,ACHA,ANkBA,ACHA;AFOA,AKfA,AFMA,ACHA,AGTA,ANkBA,ACHA;AFOA,AKfA,AFMA,AKfA,AJYA,AGTA,ANkBA,ACHA;AFOA,AKfA,AFMA,AKfA,AJYA,AGTA,ANkBA,ACHA;AFOA,AKfA,AFMA,AKfA,AJYA,AGTA,ANkBA,ACHA;AFOA,AKfA,AFMA,AMlBA,ADGA,AJYA,AGTA,ANkBA,ACHA;AFOA,AKfA,AFMA,AMlBA,ADGA,AJYA,AGTA,ANkBA,ACHA;AFOA,AKfA,AFMA,AMlBA,ADGA,AJYA,AGTA,ANkBA,ACHA;AFOA,AKfA,AFMA,AMlBA,ADGA,AENA,ANkBA,AGTA,ANkBA,ACHA;AFOA,AKfA,AFMA,AMlBA,ADGA,AENA,ANkBA,AGTA,ANkBA,ACHA;AFOA,AKfA,AFMA,AMlBA,ADGA,AJYA,AGTA,ANkBA,ACHA;AFOA,AKfA,AFMA,AMlBA,ADGA,AJYA,AGTA,ANkBA,AU9BA,AT2BA;AFOA,AKfA,AFMA,AMlBA,ADGA,AJYA,AGTA,ANkBA,AU9BA,AT2BA;AFOA,AKfA,AFMA,AMlBA,ADGA,AJYA,AGTA,ANkBA,AU9BA,AT2BA;AFOA,AYpCA,APqBA,AFMA,AMlBA,ADGA,AJYA,AGTA,ANkBA,AU9BA,AT2BA;AFOA,AYpCA,APqBA,AFMA,AMlBA,ADGA,AJYA,AGTA,ANkBA,AU9BA,AT2BA;AFOA,AYpCA,APqBA,AFMA,AMlBA,ADGA,AJYA,AGTA,ANkBA,AU9BA,AT2BA;AFOA,AavCA,ADGA,APqBA,AFMA,AMlBA,ADGA,AJYA,AGTA,ANkBA,AU9BA,AT2BA;AFOA,AavCA,ADGA,APqBA,AFMA,AMlBA,ADGA,AJYA,AGTA,ANkBA,AU9BA,AT2BA;AFOA,AavCA,ADGA,APqBA,AFMA,AMlBA,ADGA,AJYA,AGTA,ANkBA,AU9BA,AT2BA;AFOA,AavCA,ADGA,APqBA,AFMA,AMlBA,ADGA,AJYA,AGTA,ANkBA,AU9BA,AT2BA;AFOA,AavCA,ADGA,APqBA,AFMA,AMlBA,ADGA,AJYA,AGTA,AIZA,AT2BA;AFOA,AavCA,ADGA,APqBA,AFMA,AMlBA,ADGA,AJYA,AGTA,AIZA,AT2BA;AFOA,AavCA,ADGA,APqBA,AFMA,AMlBA,ADGA,AJYA,AGTA,AIZA,AT2BA;AFOA,AavCA,ADGA,APqBA,AFMA,AMlBA,ADGA,AJYA,AGTA,AIZA,AT2BA;AFOA,AavCA,ADGA,APqBA,AFMA,AMlBA,ADGA,AJYA,AGTA,AIZA,AT2BA;AFOA,AavCA,ADGA,APqBA,AFMA,AMlBA,ADGA,AJYA,AGTA,AIZA,AT2BA;AFOA,AavCA,ADGA,APqBA,AFMA,AMlBA,ADGA,AJYA,AGTA,AIZA,AT2BA;AFOA,AavCA,ADGA,APqBA,AFMA,AMlBA,ADGA,AJYA,AGTA,AIZA,AT2BA;AFOA,AavCA,ADGA,APqBA,AFMA,AMlBA,ADGA,AJYA,AGTA,AIZA,AT2BA;AFOA,AavCA,ADGA,APqBA,AFMA,AMlBA,ADGA,AJYA,AGTA,AIZA,AT2BA;AFOA,AavCA,ADGA,APqBA,AFMA,AMlBA,ADGA,AJYA,AGTA,AIZA,AT2BA;AFOA,AavCA,ADGA,APqBA,AFMA,AMlBA,ADGA,AJYA,AGTA,AIZA,AT2BA;AFOA,AavCA,ADGA,APqBA,AFMA,AMlBA,ADGA,AJYA,AOrBA,AT2BA;AFOA,AavCA,ADGA,APqBA,AFMA,AMlBA,ADGA,AJYA,AOrBA,AT2BA;AFOA,AavCA,ADGA,APqBA,AFMA,AMlBA,ADGA,AJYA,AOrBA,AT2BA;AFOA,AavCA,ADGA,APqBA,AFMA,AMlBA,ADGA,AJYA,AOrBA,AT2BA;AFOA,AavCA,ADGA,APqBA,AFMA,AMlBA,ADGA,AJYA,AOrBA,AT2BA;AFOA,AavCA,ADGA,APqBA,AFMA,AMlBA,ADGA,AJYA,AOrBA,AT2BA;AFOA,AavCA,ADGA,APqBA,AFMA,AMlBA,ADGA,AJYA,AOrBA,AT2BA;AFOA,AavCA,ADGA,APqBA,AFMA,AMlBA,ADGA,AJYA,AOrBA,AT2BA;AFOA,AavCA,ADGA,APqBA,AFMA,AMlBA,ADGA,AJYA,AOrBA,AT2BA;AFOA,AavCA,ADGA,APqBA,AFMA,AMlBA,ADGA,AJYA,AOrBA,AT2BA;AFOA,AavCA,ADGA,APqBA,AFMA,AMlBA,ADGA,AJYA,AOrBA,AT2BA;AFOA,AavCA,ADGA,APqBA,AFMA,AMlBA,ADGA,AJYA,AOrBA,AT2BA;AFOA,AavCA,ADGA,APqBA,AFMA,AMlBA,ADGA,AJYA,AOrBA,AT2BA;AFOA,AavCA,ADGA,APqBA,AFMA,AMlBA,ADGA,AJYA,AOrBA,AT2BA;AFOA,AavCA,ADGA,APqBA,AFMA,AMlBA,ADGA,AJYA,AOrBA,AT2BA;AFOA,AavCA,ADGA,APqBA,AFMA,AMlBA,ADGA,AJYA,AOrBA,AT2BA;AFOA,AavCA,ADGA,APqBA,AFMA,AMlBA,ADGA,AJYA,AOrBA,AT2BA;AFOA,AavCA,ADGA,APqBA,AFMA,AMlBA,ADGA,AGTA,AT2BA;AFOA,AavCA,ADGA,APqBA,AFMA,AMlBA,ADGA,AGTA,AT2BA;AFOA,AavCA,ADGA,APqBA,AFMA,AMlBA,ADGA,AGTA,AT2BA;AFOA,AavCA,ADGA,APqBA,AFMA,AMlBA,ADGA,AGTA,AT2BA;AFOA,AavCA,ADGA,APqBA,AFMA,AMlBA,ADGA,AGTA,AT2BA;AFOA,AavCA,ARwBA,AFMA,AMlBA,ADGA,AGTA,AT2BA;AFOA,AavCA,ARwBA,AFMA,AMlBA,ADGA,AGTA,AT2BA;AFOA,AavCA,ARwBA,AFMA,AMlBA,ADGA,AGTA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,ADGA,AGTA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,ADGA,AGTA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,ADGA,AGTA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,ADGA,AGTA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,ADGA,AGTA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,ADGA,AGTA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,ADGA,AGTA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,ADGA,AGTA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,ADGA,AGTA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,ADGA,AGTA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,ADGA,AGTA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,ADGA,AGTA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,ADGA,AGTA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,ADGA,AGTA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,ADGA,AGTA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,ADGA,AGTA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,ADGA,AGTA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,ADGA,AGTA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,ADGA,AGTA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,AENA,AT2BA;AWhCA,ARwBA,AFMA,AMlBA,APqBA;AWhCA,ARwBA,AFMA,AMlBA,APqBA;AWhCA,ARwBA,AFMA,AMlBA,APqBA;AWhCA,ARwBA,AFMA,AMlBA,APqBA;AWhCA,ARwBA,AFMA,AMlBA,APqBA;AWhCA,ARwBA,AFMA,ADGA;AWhCA,ARwBA,AFMA,ADGA;AWhCA,ARwBA,AFMA,ADGA;AWhCA,ARwBA,AFMA,ADGA;AWhCA,ARwBA,AFMA,ADGA;AWhCA,ARwBA,AFMA,ADGA;AWhCA,ARwBA,AFMA,ADGA;AWhCA,ARwBA,AFMA,ADGA;AWhCA,ARwBA,AFMA,ADGA;AWhCA,ARwBA,AFMA,ADGA;AWhCA,ARwBA,AFMA,ADGA;AWhCA,ARwBA,AFMA,ADGA;AWhCA,ARwBA,AFMA,ADGA;AWhCA,ARwBA,AFMA,ADGA;AWhCA,ARwBA,AFMA,ADGA;AWhCA,ARwBA,AFMA,ADGA;AWhCA,ARwBA,AFMA,ADGA;AWhCA,ARwBA,AFMA,ADGA;AWhCA,ARwBA,AFMA,ADGA;AWhCA,ARwBA,AFMA,ADGA;AWhCA,ARwBA,AFMA,ADGA;AWhCA,ARwBA,AFMA,ADGA;AWhCA,ARwBA,AFMA,ADGA;AWhCA,ARwBA,AFMA,ADGA;AWhCA,ARwBA,AFMA,ADGA;AWhCA,ARwBA,AFMA,ADGA;AWhCA,ARwBA,AFMA,ADGA;AWhCA,ARwBA,AFMA,ADGA;AWhCA,ARwBA,AFMA,ADGA;AWhCA,ARwBA,AFMA,ADGA;AWhCA,ARwBA,AFMA,ADGA;AWhCA,ARwBA,AFMA,ADGA;AWhCA,ARwBA,AFMA,ADGA;AWhCA,ARwBA,AFMA,ADGA;AWhCA,ARwBA,AFMA,ADGA;AWhCA,ARwBA,AFMA,ADGA;AWhCA,ARwfile":"index.js","sourcesContent":["if (require.main === module) {\n  require('./lib/cli.js')(process)\n} else {\n  throw new Error('The programmatic API was removed in npm v8.0.0')\n}\n","// Separated out for easier unit testing\nmodule.exports = async process => {\n  // set it here so that regardless of what happens later, we don't\n  // leak any private CLI configs to other programs\n  process.title = 'npm'\n\n  // We used to differentiate between known broken and unsupported\n  // versions of node and attempt to only log unsupported but still run.\n  // After we dropped node 10 support, we can use new features\n  // (like static, private, etc) which will only give vague syntax errors,\n  // so now both broken and unsupported use console, but only broken\n  // will process.exit. It is important to now perform *both* of these\n  // checks as early as possible so the user gets the error message.\n  const { checkForBrokenNode, checkForUnsupportedNode } = require('./utils/unsupported.js')\n  checkForBrokenNode()\n  checkForUnsupportedNode()\n\n  const exitHandler = require('./utils/exit-handler.js')\n  process.on('uncaughtException', exitHandler)\n  process.on('unhandledRejection', exitHandler)\n\n  const Npm = require('./npm.js')\n  const npm = new Npm()\n  exitHandler.setNpm(npm)\n\n  // if npm is called as \"npmg\" or \"npm_g\", then\n  // run in global mode.\n  if (process.argv[1][process.argv[1].length - 1] === 'g') {\n    process.argv.splice(1, 1, 'npm', '-g')\n  }\n\n  const log = require('./utils/log-shim.js')\n  const replaceInfo = require('./utils/replace-info.js')\n  log.verbose('cli', replaceInfo(process.argv))\n\n  log.info('using', 'npm@%s', npm.version)\n  log.info('using', 'node@%s', process.version)\n\n  const updateNotifier = require('./utils/update-notifier.js')\n\n  let cmd\n  // now actually fire up npm and run the command.\n  // this is how to use npm programmatically:\n  try {\n    await npm.load()\n    if (npm.config.get('version', 'cli')) {\n      npm.output(npm.version)\n      return exitHandler()\n    }\n\n    // npm --versions=cli\n    if (npm.config.get('versions', 'cli')) {\n      npm.argv = ['version']\n      npm.config.set('usage', false, 'cli')\n    }\n\n    updateNotifier(npm)\n\n    cmd = npm.argv.shift()\n    if (!cmd) {\n      npm.output(await npm.usage)\n      process.exitCode = 1\n      return exitHandler()\n    }\n\n    await npm.exec(cmd, npm.argv)\n    return exitHandler()\n  } catch (err) {\n    if (err.code === 'EUNKNOWNCOMMAND') {\n      const didYouMean = require('./utils/did-you-mean.js')\n      const suggestions = await didYouMean(npm, npm.localPrefix, cmd)\n      npm.output(`Unknown command: \"${cmd}\"${suggestions}\\n`)\n      npm.output('To see a list of supported npm commands, run:\\n  npm help')\n      process.exitCode = 1\n      return exitHandler()\n    }\n    return exitHandler(err)\n  }\n}\n","/* eslint-disable no-console */\nconst semver = require('semver')\nconst supported = require('../../package.json').engines.node\nconst knownBroken = '<6.2.0 || 9 <9.3.0'\n\n// Keep this file compatible with all practical versions of node\n// so we dont get syntax errors when trying to give the users\n// a nice error message. Don't use our log handler because\n// if we encounter a syntax error early on, that will never\n// get displayed to the user.\n\nconst checkVersion = exports.checkVersion = version => {\n  const versionNoPrerelease = version.replace(/-.*$/, '')\n  return {\n    version: versionNoPrerelease,\n    broken: semver.satisfies(versionNoPrerelease, knownBroken),\n    unsupported: !semver.satisfies(versionNoPrerelease, supported),\n  }\n}\n\nexports.checkForBrokenNode = () => {\n  const nodejs = checkVersion(process.version)\n  if (nodejs.broken) {\n    console.error('ERROR: npm is known not to run on Node.js ' + process.version)\n    console.error(\"You'll need to upgrade to a newer Node.js version in order to use this\")\n    console.error('version of npm. You can find the latest version at https://nodejs.org/')\n    process.exit(1)\n  }\n}\n\nexports.checkForUnsupportedNode = () => {\n  const nodejs = checkVersion(process.version)\n  if (nodejs.unsupported) {\n    console.error('npm does not support Node.js ' + process.version)\n    console.error('You should probably upgrade to a newer version of node as we')\n    console.error(\"can't make any promises that npm will work with this version.\")\n    console.error('You can find the latest version at https://nodejs.org/')\n  }\n}\n","module.exports = {\n  \"version\": \"8.5.5\",\n  \"name\": \"npm\",\n  \"description\": \"a package manager for JavaScript\",\n  \"workspaces\": [\n    \"docs\",\n    \"workspaces/*\"\n  ],\n  \"files\": [\n    \"index.js\",\n    \"bin\",\n    \"docs/content/**/*.md\",\n    \"docs/output/**/*.html\",\n    \"lib\",\n    \"man\"\n  ],\n  \"keywords\": [\n    \"install\",\n    \"modules\",\n    \"package manager\",\n    \"package.json\"\n  ],\n  \"preferGlobal\": true,\n  \"config\": {\n    \"publishtest\": false\n  },\n  \"homepage\": \"https://docs.npmjs.com/\",\n  \"author\": \"Isaac Z. Schlueter <i@izs.me> (http://blog.izs.me)\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/npm/cli\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/npm/cli/issues\"\n  },\n  \"directories\": {\n    \"bin\": \"./bin\",\n    \"doc\": \"./doc\",\n    \"lib\": \"./lib\",\n    \"man\": \"./man\"\n  },\n  \"main\": \"./index.js\",\n  \"bin\": {\n    \"npm\": \"bin/npm-cli.js\",\n    \"npx\": \"bin/npx-cli.js\"\n  },\n  \"exports\": {\n    \".\": [\n      {\n        \"default\": \"./index.js\"\n      },\n      \"./index.js\"\n    ],\n    \"./package.json\": \"./package.json\"\n  },\n  \"dependencies\": {\n    \"@isaacs/string-locale-compare\": \"^1.1.0\",\n    \"@npmcli/arborist\": \"^5.0.3\",\n    \"@npmcli/ci-detect\": \"^2.0.0\",\n    \"@npmcli/config\": \"^4.0.1\",\n    \"@npmcli/map-workspaces\": \"^2.0.2\",\n    \"@npmcli/package-json\": \"^1.0.1\",\n    \"@npmcli/run-script\": \"^3.0.1\",\n    \"abbrev\": \"~1.1.1\",\n    \"ansicolors\": \"~0.3.2\",\n    \"ansistyles\": \"~0.1.3\",\n    \"archy\": \"~1.0.0\",\n    \"cacache\": \"^16.0.2\",\n    \"chalk\": \"^4.1.2\",\n    \"chownr\": \"^2.0.0\",\n    \"cli-columns\": \"^4.0.0\",\n    \"cli-table3\": \"^0.6.1\",\n    \"columnify\": \"^1.6.0\",\n    \"fastest-levenshtein\": \"^1.0.12\",\n    \"glob\": \"^7.2.0\",\n    \"graceful-fs\": \"^4.2.9\",\n    \"hosted-git-info\": \"^5.0.0\",\n    \"ini\": \"^2.0.0\",\n    \"init-package-json\": \"^3.0.1\",\n    \"is-cidr\": \"^4.0.2\",\n    \"json-parse-even-better-errors\": \"^2.3.1\",\n    \"libnpmaccess\": \"^6.0.2\",\n    \"libnpmdiff\": \"^4.0.2\",\n    \"libnpmexec\": \"^4.0.2\",\n    \"libnpmfund\": \"^3.0.1\",\n    \"libnpmhook\": \"^8.0.2\",\n    \"libnpmorg\": \"^4.0.2\",\n    \"libnpmpack\": \"^4.0.2\",\n    \"libnpmpublish\": \"^6.0.2\",\n    \"libnpmsearch\": \"^5.0.2\",\n    \"libnpmteam\": \"^4.0.2\",\n    \"libnpmversion\": \"^3.0.1\",\n    \"make-fetch-happen\": \"^10.0.6\",\n    \"minipass\": \"^3.1.6\",\n    \"minipass-pipeline\": \"^1.2.4\",\n    \"mkdirp\": \"^1.0.4\",\n    \"mkdirp-infer-owner\": \"^2.0.0\",\n    \"ms\": \"^2.1.2\",\n    \"node-gyp\": \"^9.0.0\",\n    \"nopt\": \"^5.0.0\",\n    \"npm-audit-report\": \"^2.1.5\",\n    \"npm-install-checks\": \"^4.0.0\",\n    \"npm-package-arg\": \"^9.0.1\",\n    \"npm-pick-manifest\": \"^7.0.0\",\n    \"npm-profile\": \"^6.0.2\",\n    \"npm-registry-fetch\": \"^13.0.1\",\n    \"npm-user-validate\": \"^1.0.1\",\n    \"npmlog\": \"^6.0.1\",\n    \"opener\": \"^1.5.2\",\n    \"pacote\": \"^13.0.5\",\n    \"parse-conflict-json\": \"^2.0.1\",\n    \"proc-log\": \"^2.0.0\",\n    \"qrcode-terminal\": \"^0.12.0\",\n    \"read\": \"~1.0.7\",\n    \"read-package-json\": \"^5.0.0\",\n    \"read-package-json-fast\": \"^2.0.3\",\n    \"readdir-scoped-modules\": \"^1.1.0\",\n    \"rimraf\": \"^3.0.2\",\n    \"semver\": \"^7.3.5\",\n    \"ssri\": \"^8.0.1\",\n    \"tar\": \"^6.1.11\",\n    \"text-table\": \"~0.2.0\",\n    \"tiny-relative-date\": \"^1.3.0\",\n    \"treeverse\": \"^1.0.4\",\n    \"validate-npm-package-name\": \"~3.0.0\",\n    \"which\": \"^2.0.2\",\n    \"write-file-atomic\": \"^4.0.1\"\n  },\n  \"bundleDependencies\": [\n    \"@isaacs/string-locale-compare\",\n    \"@npmcli/arborist\",\n    \"@npmcli/ci-detect\",\n    \"@npmcli/config\",\n    \"@npmcli/map-workspaces\",\n    \"@npmcli/package-json\",\n    \"@npmcli/run-script\",\n    \"abbrev\",\n    \"ansicolors\",\n    \"ansistyles\",\n    \"archy\",\n    \"cacache\",\n    \"chalk\",\n    \"chownr\",\n    \"cli-columns\",\n    \"cli-table3\",\n    \"columnify\",\n    \"fastest-levenshtein\",\n    \"glob\",\n    \"graceful-fs\",\n    \"hosted-git-info\",\n    \"ini\",\n    \"init-package-json\",\n    \"is-cidr\",\n    \"json-parse-even-better-errors\",\n    \"libnpmaccess\",\n    \"libnpmdiff\",\n    \"libnpmexec\",\n    \"libnpmfund\",\n    \"libnpmhook\",\n    \"libnpmorg\",\n    \"libnpmpack\",\n    \"libnpmpublish\",\n    \"libnpmsearch\",\n    \"libnpmteam\",\n    \"libnpmversion\",\n    \"make-fetch-happen\",\n    \"minipass\",\n    \"minipass-pipeline\",\n    \"mkdirp\",\n    \"mkdirp-infer-owner\",\n    \"ms\",\n    \"node-gyp\",\n    \"nopt\",\n    \"npm-audit-report\",\n    \"npm-install-checks\",\n    \"npm-package-arg\",\n    \"npm-pick-manifest\",\n    \"npm-profile\",\n    \"npm-registry-fetch\",\n    \"npm-user-validate\",\n    \"npmlog\",\n    \"opener\",\n    \"pacote\",\n    \"parse-conflict-json\",\n    \"proc-log\",\n    \"qrcode-terminal\",\n    \"read\",\n    \"read-package-json\",\n    \"read-package-json-fast\",\n    \"readdir-scoped-modules\",\n    \"rimraf\",\n    \"semver\",\n    \"ssri\",\n    \"tar\",\n    \"text-table\",\n    \"tiny-relative-date\",\n    \"treeverse\",\n    \"validate-npm-package-name\",\n    \"which\",\n    \"write-file-atomic\"\n  ],\n  \"devDependencies\": {\n    \"@npmcli/eslint-config\": \"^2.0.0\",\n    \"@npmcli/template-oss\": \"^2.9.2\",\n    \"eslint\": \"^8.3.0\",\n    \"licensee\": \"^8.2.0\",\n    \"nock\": \"^13.2.4\",\n    \"spawk\": \"^1.7.1\",\n    \"tap\": \"^15.1.6\"\n  },\n  \"scripts\": {\n    \"dumpconf\": \"env | grep npm | sort | uniq\",\n    \"preversion\": \"bash scripts/update-authors.sh && git add AUTHORS && git commit -m \\\"update AUTHORS\\\" || true\",\n    \"licenses\": \"licensee --production --errors-only\",\n    \"test\": \"tap\",\n    \"test-all\": \"npm run test --if-present --workspaces --include-workspace-root\",\n    \"check-coverage\": \"tap\",\n    \"snap\": \"tap\",\n    \"postsnap\": \"make -s mandocs\",\n    \"test:nocleanup\": \"NO_TEST_CLEANUP=1 npm run test --\",\n    \"sudotest\": \"sudo npm run test --\",\n    \"sudotest:nocleanup\": \"sudo NO_TEST_CLEANUP=1 npm run test --\",\n    \"posttest\": \"npm run lint\",\n    \"eslint\": \"eslint\",\n    \"lint\": \"npm run eslint -- bin lib scripts smoke-tests test ./*.js\",\n    \"lintfix\": \"npm run lint -- --fix\",\n    \"prelint\": \"rimraf test/npm_cache*\",\n    \"resetdeps\": \"bash scripts/resetdeps.sh\",\n    \"smoke-tests\": \"tap smoke-tests/index.js\"\n  },\n  \"tap\": {\n    \"test-env\": [\n      \"LC_ALL=sk\"\n    ],\n    \"color\": 1,\n    \"files\": \"test/{lib,bin,index.js}\",\n    \"coverage-map\": \"test/coverage-map.js\",\n    \"check-coverage\": true,\n    \"timeout\": 600\n  },\n  \"templateOSS\": {\n    \"applyRootRepoFiles\": false,\n    \"applyWorkspaceRepoFiles\": true,\n    \"applyRootModuleFiles\": false,\n    \"workspaces\": [\n      \"@npmcli/arborist\",\n      \"libnpmaccess\",\n      \"libnpmdiff\",\n      \"libnpmfund\",\n      \"libnpmexec\",\n      \"libnpmorg\",\n      \"libnpmhook\",\n      \"libnpmpack\",\n      \"libnpmpublish\",\n      \"libnpmsearch\",\n      \"libnpmteam\",\n      \"libnpmversion\"\n    ],\n    \"version\": \"2.9.2\"\n  },\n  \"license\": \"Artistic-2.0\",\n  \"engines\": {\n    \"node\": \"^12.13.0 || ^14.15.0 || >=16\"\n  }\n}\n","const os = require('os')\nconst log = require('./log-shim.js')\n\nconst errorMessage = require('./error-message.js')\nconst replaceInfo = require('./replace-info.js')\n\nconst messageText = msg => msg.map(line => line.slice(1).join(' ')).join('\\n')\n\nlet npm = null // set by the cli\nlet exitHandlerCalled = false\nlet showLogFileMessage = false\n\nprocess.on('exit', code => {\n  log.disableProgress()\n\n  // process.emit is synchronous, so the timeEnd handler will run before the\n  // unfinished timer check below\n  process.emit('timeEnd', 'npm')\n\n  const hasNpm = !!npm\n  const hasLoadedNpm = hasNpm && npm.config.loaded\n\n  // Unfinished timers can be read before config load\n  if (hasNpm) {\n    for (const [name, timer] of npm.unfinishedTimers) {\n      log.verbose('unfinished npm timer', name, timer)\n    }\n  }\n\n  if (!code) {\n    log.info('ok')\n  } else {\n    log.verbose('code', code)\n  }\n\n  if (!exitHandlerCalled) {\n    process.exitCode = code || 1\n    log.error('', 'Exit handler never called!')\n    console.error('')\n    log.error('', 'This is an error with npm itself. Please report this error at:')\n    log.error('', '    <https://github.com/npm/cli/issues>')\n    showLogFileMessage = true\n  }\n\n  // In timing mode we always show the log file message\n  if (hasLoadedNpm && npm.config.get('timing')) {\n    showLogFileMessage = true\n  }\n\n  // npm must be loaded to know where the log file was written\n  if (showLogFileMessage && hasLoadedNpm) {\n    // just a line break if not in silent mode\n    if (!npm.silent) {\n      console.error('')\n    }\n\n    log.error(\n      '',\n      [\n        'A complete log of this run can be found in:',\n        ...npm.logFiles.map(f => '    ' + f),\n      ].join('\\n')\n    )\n  }\n\n  // This removes any listeners npm setup and writes files if necessary\n  // This is mostly used for tests to avoid max listener warnings\n  if (hasLoadedNpm) {\n    npm.unload()\n  }\n\n  // these are needed for the tests to have a clean slate in each test case\n  exitHandlerCalled = false\n  showLogFileMessage = false\n})\n\nconst exitHandler = err => {\n  exitHandlerCalled = true\n\n  log.disableProgress()\n\n  const hasNpm = !!npm\n  const hasLoadedNpm = hasNpm && npm.config.loaded\n\n  if (!hasNpm) {\n    err = err || new Error('Exit prior to setting npm in exit handler')\n    console.error(err.stack || err.message)\n    return process.exit(1)\n  }\n\n  if (!hasLoadedNpm) {\n    err = err || new Error('Exit prior to config file resolving.')\n    console.error(err.stack || err.message)\n  }\n\n  // only show the notification if it finished.\n  if (typeof npm.updateNotification === 'string') {\n    const { level } = log\n    log.level = 'notice'\n    log.notice('', npm.updateNotification)\n    log.level = level\n  }\n\n  let exitCode\n  let noLogMessage\n\n  if (err) {\n    exitCode = 1\n    // if we got a command that just shells out to something else, then it\n    // will presumably print its own errors and exit with a proper status\n    // code if there's a problem.  If we got an error with a code=0, then...\n    // something else went wrong along the way, so maybe an npm problem?\n    const isShellout = npm.shelloutCommands.includes(npm.command)\n    const quietShellout = isShellout && typeof err.code === 'number' && err.code\n    if (quietShellout) {\n      exitCode = err.code\n      noLogMessage = true\n    } else if (typeof err === 'string') {\n      // XXX: we should stop throwing strings\n      log.error('', err)\n      noLogMessage = true\n    } else if (!(err instanceof Error)) {\n      log.error('weird error', err)\n      noLogMessage = true\n    } else {\n      if (!err.code) {\n        const matchErrorCode = err.message.match(/^(?:Error: )?(E[A-Z]+)/)\n        err.code = matchErrorCode && matchErrorCode[1]\n      }\n\n      for (const k of ['type', 'stack', 'statusCode', 'pkgid']) {\n        const v = err[k]\n        if (v) {\n          log.verbose(k, replaceInfo(v))\n        }\n      }\n\n      const args = replaceInfo(process.argv)\n      log.verbose('cwd', process.cwd())\n      log.verbose('', os.type() + ' ' + os.release())\n      log.verbose('argv', args.map(JSON.stringify).join(' '))\n      log.verbose('node', process.version)\n      log.verbose('npm ', 'v' + npm.version)\n\n      for (const k of ['code', 'syscall', 'file', 'path', 'dest', 'errno']) {\n        const v = err[k]\n        if (v) {\n          log.error(k, v)\n        }\n      }\n\n      const msg = errorMessage(err, npm)\n      for (const errline of [...msg.summary, ...msg.detail]) {\n        log.error(...errline)\n      }\n\n      if (hasLoadedNpm && npm.config.get('json')) {\n        const error = {\n          error: {\n            code: err.code,\n            summary: messageText(msg.summary),\n            detail: messageText(msg.detail),\n          },\n        }\n        console.error(JSON.stringify(error, null, 2))\n      }\n\n      if (typeof err.errno === 'number') {\n        exitCode = err.errno\n      } else if (typeof err.code === 'number') {\n        exitCode = err.code\n      }\n    }\n  }\n\n  log.verbose('exit', exitCode || 0)\n\n  showLogFileMessage = (hasLoadedNpm && npm.silent) || noLogMessage\n    ? false\n    : !!exitCode\n\n  // explicitly call process.exit now so we don't hang on things like the\n  // update notifier, also flush stdout beforehand because process.exit doesn't\n  // wait for that to happen.\n  process.stdout.write('', () => process.exit(exitCode))\n}\n\nmodule.exports = exitHandler\nmodule.exports.setNpm = n => {\n  npm = n\n}\n","const NPMLOG = require('npmlog')\nconst PROCLOG = require('proc-log')\n\n// Sets getter and optionally a setter\n// otherwise setting should throw\nconst accessors = (obj, set) => (k) => ({\n  get: () => obj[k],\n  set: set ? (v) => (obj[k] = v) : () => {\n    throw new Error(`Cant set ${k}`)\n  },\n})\n\n// Set the value to a bound function on the object\nconst value = (obj) => (k) => ({\n  value: (...args) => obj[k].apply(obj, args),\n})\n\nconst properties = {\n  // npmlog getters/setters\n  level: accessors(NPMLOG, true),\n  heading: accessors(NPMLOG, true),\n  levels: accessors(NPMLOG),\n  gauge: accessors(NPMLOG),\n  stream: accessors(NPMLOG),\n  tracker: accessors(NPMLOG),\n  progressEnabled: accessors(NPMLOG),\n  // npmlog methods\n  useColor: value(NPMLOG),\n  enableColor: value(NPMLOG),\n  disableColor: value(NPMLOG),\n  enableUnicode: value(NPMLOG),\n  disableUnicode: value(NPMLOG),\n  enableProgress: value(NPMLOG),\n  disableProgress: value(NPMLOG),\n  clearProgress: value(NPMLOG),\n  showProgress: value(NPMLOG),\n  newItem: value(NPMLOG),\n  newGroup: value(NPMLOG),\n  // proclog methods\n  notice: value(PROCLOG),\n  error: value(PROCLOG),\n  warn: value(PROCLOG),\n  info: value(PROCLOG),\n  verbose: value(PROCLOG),\n  http: value(PROCLOG),\n  silly: value(PROCLOG),\n  pause: value(PROCLOG),\n  resume: value(PROCLOG),\n}\n\nconst descriptors = Object.entries(properties).reduce((acc, [k, v]) => {\n  acc[k] = { enumerable: true, ...v(k) }\n  return acc\n}, {})\n\n// Create an object with the allowed properties rom npm log and all\n// the logging methods from proc log\n// XXX: this should go away and requires of this should be replaced with proc-log + new display\nmodule.exports = Object.freeze(Object.defineProperties({}, descriptors))\n","const { format } = require('util')\nconst { resolve } = require('path')\nconst nameValidator = require('validate-npm-package-name')\nconst replaceInfo = require('./replace-info.js')\nconst { report } = require('./explain-eresolve.js')\nconst log = require('./log-shim')\n\nmodule.exports = (er, npm) => {\n  const short = []\n  const detail = []\n\n  if (er.message) {\n    er.message = replaceInfo(er.message)\n  }\n  if (er.stack) {\n    er.stack = replaceInfo(er.stack)\n  }\n\n  switch (er.code) {\n    case 'ERESOLVE':\n      short.push(['ERESOLVE', er.message])\n      detail.push(['', ''])\n      // XXX(display): error messages are logged so we use the logColor since that is based\n      // on stderr. This should be handled solely by the display layer so it could also be\n      // printed to stdout if necessary.\n      detail.push(['', report(er, !!npm.logColor, resolve(npm.cache, 'eresolve-report.txt'))])\n      break\n\n    case 'ENOLOCK': {\n      const cmd = npm.command || ''\n      short.push([cmd, 'This command requires an existing lockfile.'])\n      detail.push([cmd, 'Try creating one first with: npm i --package-lock-only'])\n      detail.push([cmd, `Original error: ${er.message}`])\n      break\n    }\n\n    case 'ENOAUDIT':\n      short.push(['audit', er.message])\n      break\n\n    case 'ECONNREFUSED':\n      short.push(['', er])\n      detail.push([\n        '',\n        [\n          '\\nIf you are behind a proxy, please make sure that the',\n          \"'proxy' config is set properly.  See: 'npm help config'\",\n        ].join('\\n'),\n      ])\n      break\n\n    case 'EACCES':\n    case 'EPERM': {\n      const isCachePath =\n        typeof er.path === 'string' &&\n        npm.config.loaded &&\n        er.path.startsWith(npm.config.get('cache'))\n      const isCacheDest =\n        typeof er.dest === 'string' &&\n        npm.config.loaded &&\n        er.dest.startsWith(npm.config.get('cache'))\n\n      const isWindows = require('./is-windows.js')\n\n      if (!isWindows && (isCachePath || isCacheDest)) {\n        // user probably doesn't need this, but still add it to the debug log\n        log.verbose(er.stack)\n        short.push([\n          '',\n          [\n            '',\n            'Your cache folder contains root-owned files, due to a bug in',\n            'previous versions of npm which has since been addressed.',\n            '',\n            'To permanently fix this problem, please run:',\n            `  sudo chown -R ${process.getuid()}:${process.getgid()} ${JSON.stringify(\n              npm.config.get('cache')\n            )}`,\n          ].join('\\n'),\n        ])\n      } else {\n        short.push(['', er])\n        detail.push([\n          '',\n          [\n            '\\nThe operation was rejected by your operating system.',\n            isWindows\n              /* eslint-disable-next-line max-len */\n              ? \"It's possible that the file was already in use (by a text editor or antivirus),\\n\" +\n                'or that you lack permissions to access it.'\n              /* eslint-disable-next-line max-len */\n              : 'It is likely you do not have the permissions to access this file as the current user',\n            '\\nIf you believe this might be a permissions issue, please double-check the',\n            'permissions of the file and its containing directories, or try running',\n            'the command again as root/Administrator.',\n          ].join('\\n'),\n        ])\n      }\n      break\n    }\n\n    case 'ENOGIT':\n      short.push(['', er.message])\n      detail.push([\n        '',\n        ['', 'Failed using git.', 'Please check if you have git installed and in your PATH.'].join(\n          '\\n'\n        ),\n      ])\n      break\n\n    case 'EJSONPARSE':\n      // Check whether we ran into a conflict in our own package.json\n      if (er.path === resolve(npm.prefix, 'package.json')) {\n        const { isDiff } = require('parse-conflict-json')\n        const txt = require('fs').readFileSync(er.path, 'utf8').replace(/\\r\\n/g, '\\n')\n        if (isDiff(txt)) {\n          detail.push([\n            '',\n            [\n              'Merge conflict detected in your package.json.',\n              '',\n              'Please resolve the package.json conflict and retry.',\n            ].join('\\n'),\n          ])\n          break\n        }\n      }\n      short.push(['JSON.parse', er.message])\n      detail.push([\n        'JSON.parse',\n        [\n          'Failed to parse JSON data.',\n          'Note: package.json must be actual JSON, not just JavaScript.',\n        ].join('\\n'),\n      ])\n      break\n\n    case 'EOTP':\n    case 'E401':\n      // E401 is for places where we accidentally neglect OTP stuff\n      if (er.code === 'EOTP' || /one-time pass/.test(er.message)) {\n        short.push(['', 'This operation requires a one-time password from your authenticator.'])\n        detail.push([\n          '',\n          [\n            'You can provide a one-time password by passing --otp=<code> to the command you ran.',\n            'If you already provided a one-time password then it is likely that you either typoed',\n            'it, or it timed out. Please try again.',\n          ].join('\\n'),\n        ])\n      } else {\n        // npm ERR! code E401\n        // npm ERR! Unable to authenticate, need: Basic\n        const auth =\n          !er.headers || !er.headers['www-authenticate']\n            ? []\n            : er.headers['www-authenticate'].map(au => au.split(/[,\\s]+/))[0]\n\n        if (auth.includes('Bearer')) {\n          short.push([\n            '',\n            'Unable to authenticate, your authentication token seems to be invalid.',\n          ])\n          detail.push([\n            '',\n            ['To correct this please trying logging in again with:', '    npm login'].join('\\n'),\n          ])\n        } else if (auth.includes('Basic')) {\n          short.push(['', 'Incorrect or missing password.'])\n          detail.push([\n            '',\n            [\n              'If you were trying to login, change your password, create an',\n              'authentication token or enable two-factor authentication then',\n              'that means you likely typed your password in incorrectly.',\n              'Please try again, or recover your password at:',\n              '    https://www.npmjs.com/forgot',\n              '',\n              'If you were doing some other operation then your saved credentials are',\n              'probably out of date. To correct this please try logging in again with:',\n              '    npm login',\n            ].join('\\n'),\n          ])\n        } else {\n          short.push(['', er.message || er])\n        }\n      }\n      break\n\n    case 'E404':\n      // There's no need to have 404 in the message as well.\n      short.push(['404', er.message.replace(/^404\\s+/, '')])\n      if (er.pkgid && er.pkgid !== '-') {\n        const pkg = er.pkgid.replace(/(?!^)@.*$/, '')\n\n        detail.push(['404', ''])\n        detail.push(['404', '', `'${replaceInfo(er.pkgid)}' is not in this registry.`])\n\n        const valResult = nameValidator(pkg)\n\n        if (!valResult.validForNewPackages) {\n          detail.push(['404', 'This package name is not valid, because', ''])\n\n          const errorsArray = [...(valResult.errors || []), ...(valResult.warnings || [])]\n          errorsArray.forEach((item, idx) => detail.push(['404', ' ' + (idx + 1) + '. ' + item]))\n        }\n\n        detail.push(['404', '\\nNote that you can also install from a'])\n        detail.push(['404', 'tarball, folder, http url, or git url.'])\n      }\n      break\n\n    case 'EPUBLISHCONFLICT':\n      short.push(['publish fail', 'Cannot publish over existing version.'])\n      detail.push(['publish fail', \"Update the 'version' field in package.json and try again.\"])\n      detail.push(['publish fail', ''])\n      detail.push(['publish fail', 'To automatically increment version numbers, see:'])\n      detail.push(['publish fail', '    npm help version'])\n      break\n\n    case 'EISGIT':\n      short.push(['git', er.message])\n      short.push(['git', '    ' + er.path])\n      detail.push([\n        'git',\n        ['Refusing to remove it. Update manually,', 'or move it out of the way first.'].join('\\n'),\n      ])\n      break\n\n    case 'EBADPLATFORM': {\n      const validOs =\n        er.required && er.required.os && er.required.os.join\n          ? er.required.os.join(',')\n          : er.required.os\n      const validArch =\n        er.required && er.required.cpu && er.required.cpu.join\n          ? er.required.cpu.join(',')\n          : er.required.cpu\n      const expected = { os: validOs, arch: validArch }\n      const actual = { os: process.platform, arch: process.arch }\n      short.push([\n        'notsup',\n        [\n          format(\n            'Unsupported platform for %s: wanted %j (current: %j)',\n            er.pkgid,\n            expected,\n            actual\n          ),\n        ].join('\\n'),\n      ])\n      detail.push([\n        'notsup',\n        [\n          'Valid OS:    ' + validOs,\n          'Valid Arch:  ' + validArch,\n          'Actual OS:   ' + process.platform,\n          'Actual Arch: ' + process.arch,\n        ].join('\\n'),\n      ])\n      break\n    }\n\n    case 'EEXIST':\n      short.push(['', er.message])\n      short.push(['', 'File exists: ' + (er.dest || er.path)])\n      detail.push(['', 'Remove the existing file and try again, or run npm'])\n      detail.push(['', 'with --force to overwrite files recklessly.'])\n      break\n\n    case 'ENEEDAUTH':\n      short.push(['need auth', er.message])\n      detail.push(['need auth', 'You need to authorize this machine using `npm adduser`'])\n      break\n\n    case 'ECONNRESET':\n    case 'ENOTFOUND':\n    case 'ETIMEDOUT':\n    case 'ERR_SOCKET_TIMEOUT':\n    case 'EAI_FAIL':\n      short.push(['network', er.message])\n      detail.push([\n        'network',\n        [\n          'This is a problem related to network connectivity.',\n          'In most cases you are behind a proxy or have bad network settings.',\n          '\\nIf you are behind a proxy, please make sure that the',\n          \"'proxy' config is set properly.  See: 'npm help config'\",\n        ].join('\\n'),\n      ])\n      break\n\n    case 'ETARGET':\n      short.push(['notarget', er.message])\n      detail.push([\n        'notarget',\n        [\n          'In most cases you or one of your dependencies are requesting',\n          \"a package version that doesn't exist.\",\n        ].join('\\n'),\n      ])\n      break\n\n    case 'E403':\n      short.push(['403', er.message])\n      detail.push([\n        '403',\n        [\n          'In most cases, you or one of your dependencies are requesting',\n          'a package version that is forbidden by your security policy, or',\n          'on a server you do not have access to.',\n        ].join('\\n'),\n      ])\n      break\n\n    case 'EBADENGINE':\n      short.push(['engine', er.message])\n      short.push(['engine', 'Not compatible with your version of node/npm: ' + er.pkgid])\n      detail.push([\n        'notsup',\n        [\n          'Not compatible with your version of node/npm: ' + er.pkgid,\n          'Required: ' + JSON.stringify(er.required),\n          'Actual:   ' +\n            JSON.stringify({\n              npm: npm.version,\n              node: npm.config.loaded ? npm.config.get('node-version') : process.version,\n            }),\n        ].join('\\n'),\n      ])\n      break\n\n    case 'ENOSPC':\n      short.push(['nospc', er.message])\n      detail.push([\n        'nospc',\n        [\n          'There appears to be insufficient space on your system to finish.',\n          'Clear up some disk space and try again.',\n        ].join('\\n'),\n      ])\n      break\n\n    case 'EROFS':\n      short.push(['rofs', er.message])\n      detail.push([\n        'rofs',\n        [\n          'Often virtualized file systems, or other file systems',\n          \"that don't support symlinks, give this error.\",\n        ].join('\\n'),\n      ])\n      break\n\n    case 'ENOENT':\n      short.push(['enoent', er.message])\n      detail.push([\n        'enoent',\n        [\n          'This is related to npm not being able to find a file.',\n          er.file ? \"\\nCheck if the file '\" + er.file + \"' is present.\" : '',\n        ].join('\\n'),\n      ])\n      break\n\n    case 'EMISSINGARG':\n    case 'EUNKNOWNTYPE':\n    case 'EINVALIDTYPE':\n    case 'ETOOMANYARGS':\n      short.push(['typeerror', er.stack])\n      detail.push([\n        'typeerror',\n        [\n          'This is an error with npm itself. Please report this error at:',\n          '    https://github.com/npm/cli/issues',\n        ].join('\\n'),\n      ])\n      break\n\n    default:\n      short.push(['', er.message || er])\n      if (er.signal) {\n        detail.push(['signal', er.signal])\n      }\n\n      if (er.cmd && Array.isArray(er.args)) {\n        detail.push(['command', ...[er.cmd, ...er.args.map(replaceInfo)]])\n      }\n\n      if (er.stdout) {\n        detail.push(['', er.stdout.trim()])\n      }\n\n      if (er.stderr) {\n        detail.push(['', er.stderr.trim()])\n      }\n\n      break\n  }\n  return { summary: short, detail: detail }\n}\n","// return the PATH array in a cross-platform way\nconst PATH = process.env.PATH || process.env.Path || process.env.path\nconst { delimiter } = require('path')\nmodule.exports = PATH.split(delimiter)\n","const URL = require('url').URL\n\n// replaces auth info in an array of arguments or in a strings\nfunction replaceInfo (arg) {\n  const isArray = Array.isArray(arg)\n  const isString = str => typeof str === 'string'\n\n  if (!isArray && !isString(arg)) {\n    return arg\n  }\n\n  const testUrlAndReplace = str => {\n    try {\n      const url = new URL(str)\n      return url.password === '' ? str : str.replace(url.password, '***')\n    } catch (e) {\n      return str\n    }\n  }\n\n  const args = isString(arg) ? arg.split(' ') : arg\n  const info = args.map(a => {\n    if (isString(a) && a.indexOf(' ') > -1) {\n      return a.split(' ').map(testUrlAndReplace).join(' ')\n    }\n\n    return testUrlAndReplace(a)\n  })\n\n  return isString(arg) ? info.join(' ') : info\n}\n\nmodule.exports = replaceInfo\n","// this is called when an ERESOLVE error is caught in the exit-handler,\n// or when there's a log.warn('eresolve', msg, explanation), to turn it\n// into a human-intelligible explanation of what's wrong and how to fix.\nconst { writeFileSync } = require('fs')\nconst { explainEdge, explainNode, printNode } = require('./explain-dep.js')\n\n// expl is an explanation object that comes from Arborist.  It looks like:\n// Depth is how far we want to want to descend into the object making a report.\n// The full report (ie, depth=Infinity) is always written to the cache folder\n// at ${cache}/eresolve-report.txt along with full json.\nconst explain = (expl, color, depth) => {\n  const { edge, dep, current, peerConflict, currentEdge } = expl\n\n  const out = []\n  const whileInstalling = dep && dep.whileInstalling ||\n    current && current.whileInstalling ||\n    edge && edge.from && edge.from.whileInstalling\n  if (whileInstalling) {\n    out.push('While resolving: ' + printNode(whileInstalling, color))\n  }\n\n  // it \"should\" be impossible for an ERESOLVE explanation to lack both\n  // current and currentEdge, but better to have a less helpful error\n  // than a crashing failure.\n  if (current) {\n    out.push('Found: ' + explainNode(current, depth, color))\n  } else if (peerConflict && peerConflict.current) {\n    out.push('Found: ' + explainNode(peerConflict.current, depth, color))\n  } else if (currentEdge) {\n    out.push('Found: ' + explainEdge(currentEdge, depth, color))\n  } else /* istanbul ignore else - should always have one */ if (edge) {\n    out.push('Found: ' + explainEdge(edge, depth, color))\n  }\n\n  out.push('\\nCould not resolve dependency:\\n' +\n    explainEdge(edge, depth, color))\n\n  if (peerConflict) {\n    const heading = '\\nConflicting peer dependency:'\n    const pc = explainNode(peerConflict.peer, depth, color)\n    out.push(heading + ' ' + pc)\n  }\n\n  return out.join('\\n')\n}\n\n// generate a full verbose report and tell the user how to fix it\nconst report = (expl, color, fullReport) => {\n  const orNoStrict = expl.strictPeerDeps ? '--no-strict-peer-deps, ' : ''\n  const fix = `Fix the upstream dependency conflict, or retry\nthis command with ${orNoStrict}--force, or --legacy-peer-deps\nto accept an incorrect (and potentially broken) dependency resolution.`\n\n  writeFileSync(fullReport, `# npm resolution error report\n\n${new Date().toISOString()}\n\n${explain(expl, false, Infinity)}\n\n${fix}\n\nRaw JSON explanation object:\n\n${JSON.stringify(expl, null, 2)}\n`, 'utf8')\n\n  return explain(expl, color, 4) +\n    `\\n\\n${fix}\\n\\nSee ${fullReport} for a full report.`\n}\n\nmodule.exports = {\n  explain,\n  report,\n}\n","const chalk = require('chalk')\nconst nocolor = {\n  bold: s => s,\n  dim: s => s,\n  red: s => s,\n  yellow: s => s,\n  cyan: s => s,\n  magenta: s => s,\n  blue: s => s,\n  green: s => s,\n}\n\nconst { relative } = require('path')\n\nconst explainNode = (node, depth, color) =>\n  printNode(node, color) +\n  explainDependents(node, depth, color) +\n  explainLinksIn(node, depth, color)\n\nconst colorType = (type, color) => {\n  const { red, yellow, cyan, magenta, blue, green } = color ? chalk : nocolor\n  const style = type === 'extraneous' ? red\n    : type === 'dev' ? yellow\n    : type === 'optional' ? cyan\n    : type === 'peer' ? magenta\n    : type === 'bundled' ? blue\n    : type === 'workspace' ? green\n    : /* istanbul ignore next */ s => s\n  return style(type)\n}\n\nconst printNode = (node, color) => {\n  const {\n    name,\n    version,\n    location,\n    extraneous,\n    dev,\n    optional,\n    peer,\n    bundled,\n    isWorkspace,\n  } = node\n  const { bold, dim, green } = color ? chalk : nocolor\n  const extra = []\n  if (extraneous) {\n    extra.push(' ' + bold(colorType('extraneous', color)))\n  }\n\n  if (dev) {\n    extra.push(' ' + bold(colorType('dev', color)))\n  }\n\n  if (optional) {\n    extra.push(' ' + bold(colorType('optional', color)))\n  }\n\n  if (peer) {\n    extra.push(' ' + bold(colorType('peer', color)))\n  }\n\n  if (bundled) {\n    extra.push(' ' + bold(colorType('bundled', color)))\n  }\n\n  const pkgid = isWorkspace\n    ? green(`${name}@${version}`)\n    : `${bold(name)}@${bold(version)}`\n\n  return `${pkgid}${extra.join('')}` +\n    (location ? dim(`\\n${location}`) : '')\n}\n\nconst explainLinksIn = ({ linksIn }, depth, color) => {\n  if (!linksIn || !linksIn.length || depth <= 0) {\n    return ''\n  }\n\n  const messages = linksIn.map(link => explainNode(link, depth - 1, color))\n  const str = '\\n' + messages.join('\\n')\n  return str.split('\\n').join('\\n  ')\n}\n\nconst explainDependents = ({ name, dependents }, depth, color) => {\n  if (!dependents || !dependents.length || depth <= 0) {\n    return ''\n  }\n\n  const max = Math.ceil(depth / 2)\n  const messages = dependents.slice(0, max)\n    .map(edge => explainEdge(edge, depth, color))\n\n  // show just the names of the first 5 deps that overflowed the list\n  if (dependents.length > max) {\n    let len = 0\n    const maxLen = 50\n    const showNames = []\n    for (let i = max; i < dependents.length; i++) {\n      const { from: { name = 'the root project' } } = dependents[i]\n      len += name.length\n      if (len >= maxLen && i < dependents.length - 1) {\n        showNames.push('...')\n        break\n      }\n      showNames.push(name)\n    }\n    const show = `(${showNames.join(', ')})`\n    messages.push(`${dependents.length - max} more ${show}`)\n  }\n\n  const str = '\\n' + messages.join('\\n')\n  return str.split('\\n').join('\\n  ')\n}\n\nconst explainEdge = ({ name, type, bundled, from, spec }, depth, color) => {\n  const { bold } = color ? chalk : nocolor\n  const dep = type === 'workspace'\n    ? bold(relative(from.location, spec.slice('file:'.length)))\n    : `${bold(name)}@\"${bold(spec)}\"`\n  const fromMsg = ` from ${explainFrom(from, depth, color)}`\n\n  return (type === 'prod' ? '' : `${colorType(type, color)} `) +\n    (bundled ? `${colorType('bundled', color)} ` : '') +\n    `${dep}${fromMsg}`\n}\n\nconst explainFrom = (from, depth, color) => {\n  if (!from.name && !from.version) {\n    return 'the root project'\n  }\n\n  return printNode(from, color) +\n    explainDependents(from, depth - 1, color) +\n    explainLinksIn(from, depth - 1, color)\n}\n\nmodule.exports = { explainNode, printNode, explainEdge }\n","module.exports = process.platform === 'win32'\n","// print a banner telling the user to upgrade npm to latest\n// but not in CI, and not if we're doing that already.\n// Check daily for betas, and weekly otherwise.\n\nconst pacote = require('pacote')\nconst ciDetect = require('@npmcli/ci-detect')\nconst semver = require('semver')\nconst chalk = require('chalk')\nconst { promisify } = require('util')\nconst stat = promisify(require('fs').stat)\nconst writeFile = promisify(require('fs').writeFile)\nconst { resolve } = require('path')\n\nconst isGlobalNpmUpdate = npm => {\n  return npm.flatOptions.global &&\n    ['install', 'update'].includes(npm.command) &&\n    npm.argv.some(arg => /^npm(@|$)/.test(arg))\n}\n\n// update check frequency\nconst DAILY = 1000 * 60 * 60 * 24\nconst WEEKLY = DAILY * 7\n\n// don't put it in the _cacache folder, just in npm's cache\nconst lastCheckedFile = npm =>\n  resolve(npm.flatOptions.cache, '../_update-notifier-last-checked')\n\nconst checkTimeout = async (npm, duration) => {\n  const t = new Date(Date.now() - duration)\n  const f = lastCheckedFile(npm)\n  // if we don't have a file, then definitely check it.\n  const st = await stat(f).catch(() => ({ mtime: t - 1 }))\n  return t > st.mtime\n}\n\nconst updateNotifier = async (npm, spec = 'latest') => {\n  // never check for updates in CI, when updating npm already, or opted out\n  if (!npm.config.get('update-notifier') ||\n      isGlobalNpmUpdate(npm) ||\n      ciDetect()) {\n    return null\n  }\n\n  // if we're on a prerelease train, then updates are coming fast\n  // check for a new one daily.  otherwise, weekly.\n  const { version } = npm\n  const current = semver.parse(version)\n\n  // if we're on a beta train, always get the next beta\n  if (current.prerelease.length) {\n    spec = `^${version}`\n  }\n\n  // while on a beta train, get updates daily\n  const duration = spec !== 'latest' ? DAILY : WEEKLY\n\n  // if we've already checked within the specified duration, don't check again\n  if (!(await checkTimeout(npm, duration))) {\n    return null\n  }\n\n  // if they're currently using a prerelease, nudge to the next prerelease\n  // otherwise, nudge to latest.\n  const useColor = npm.logColor\n\n  const mani = await pacote.manifest(`npm@${spec}`, {\n    // always prefer latest, even if doing --tag=whatever on the cmd\n    defaultTag: 'latest',\n    ...npm.flatOptions,\n  }).catch(() => null)\n\n  // if pacote failed, give up\n  if (!mani) {\n    return null\n  }\n\n  const latest = mani.version\n\n  // if the current version is *greater* than latest, we're on a 'next'\n  // and should get the updates from that release train.\n  // Note that this isn't another http request over the network, because\n  // the packument will be cached by pacote from previous request.\n  if (semver.gt(version, latest) && spec === 'latest') {\n    return updateNotifier(npm, `^${version}`)\n  }\n\n  // if we already have something >= the desired spec, then we're done\n  if (semver.gte(version, latest)) {\n    return null\n  }\n\n  // ok!  notify the user about this update they should get.\n  // The message is saved for printing at process exit so it will not get\n  // lost in any other messages being printed as part of the command.\n  const update = semver.parse(mani.version)\n  const type = update.major !== current.major ? 'major'\n    : update.minor !== current.minor ? 'minor'\n    : update.patch !== current.patch ? 'patch'\n    : 'prerelease'\n  const typec = !useColor ? type\n    : type === 'major' ? chalk.red(type)\n    : type === 'minor' ? chalk.yellow(type)\n    : chalk.green(type)\n  const oldc = !useColor ? current : chalk.red(current)\n  const latestc = !useColor ? latest : chalk.green(latest)\n  const changelog = `https://github.com/npm/cli/releases/tag/v${latest}`\n  const changelogc = !useColor ? `<${changelog}>` : chalk.cyan(changelog)\n  const cmd = `npm install -g npm@${latest}`\n  const cmdc = !useColor ? `\\`${cmd}\\`` : chalk.green(cmd)\n  const message = `\\nNew ${typec} version of npm available! ` +\n    `${oldc} -> ${latestc}\\n` +\n    `Changelog: ${changelogc}\\n` +\n    `Run ${cmdc} to update!\\n`\n\n  return message\n}\n\n// only update the notification timeout if we actually finished checking\nmodule.exports = async npm => {\n  const notification = await updateNotifier(npm)\n  // intentional.  do not await this.  it's a best-effort update.  if this\n  // fails, it's ok.  might be using /dev/null as the cache or something weird\n  // like that.\n  writeFile(lastCheckedFile(npm), '').catch(() => {})\n  npm.updateNotification = notification\n}\n","const { distance } = require('fastest-levenshtein')\nconst readJson = require('read-package-json-fast')\nconst { cmdList } = require('./cmd-list.js')\n\nconst didYouMean = async (npm, path, scmd) => {\n  // const cmd = await npm.cmd(str)\n  const close = cmdList.filter(cmd => distance(scmd, cmd) < scmd.length * 0.4 && scmd !== cmd)\n  let best = []\n  for (const str of close) {\n    const cmd = await npm.cmd(str)\n    best.push(`    npm ${str} # ${cmd.description}`)\n  }\n  // We would already be suggesting this in `npm x` so omit them here\n  const runScripts = ['stop', 'start', 'test', 'restart']\n  try {\n    const { bin, scripts } = await readJson(`${path}/package.json`)\n    best = best.concat(\n      Object.keys(scripts || {})\n        .filter(cmd => distance(scmd, cmd) < scmd.length * 0.4 && !runScripts.includes(cmd))\n        .map(str => `    npm run ${str} # run the \"${str}\" package script`),\n      Object.keys(bin || {})\n        .filter(cmd => distance(scmd, cmd) < scmd.length * 0.4)\n        /* eslint-disable-next-line max-len */\n        .map(str => `    npm exec ${str} # run the \"${str}\" command from either this or a remote npm package`)\n    )\n  } catch (_) {\n    // gracefully ignore not being in a folder w/ a package.json\n  }\n\n  if (best.length === 0) {\n    return ''\n  }\n\n  const suggestion =\n    best.length === 1\n      ? `\\n\\nDid you mean this?\\n${best[0]}`\n      : `\\n\\nDid you mean one of these?\\n${best.slice(0, 3).join('\\n')}`\n  return suggestion\n}\nmodule.exports = didYouMean\n","// short names for common things\nconst shorthands = {\n  un: 'uninstall',\n  rb: 'rebuild',\n  list: 'ls',\n  ln: 'link',\n  create: 'init',\n  i: 'install',\n  it: 'install-test',\n  cit: 'install-ci-test',\n  up: 'update',\n  c: 'config',\n  s: 'search',\n  se: 'search',\n  tst: 'test',\n  t: 'test',\n  ddp: 'dedupe',\n  v: 'view',\n  run: 'run-script',\n  'clean-install': 'ci',\n  'clean-install-test': 'cit',\n  x: 'exec',\n  why: 'explain',\n}\n\nconst affordances = {\n  la: 'll',\n  verison: 'version',\n  ic: 'ci',\n  innit: 'init',\n  // manually abbrev so that install-test doesn't make insta stop working\n  in: 'install',\n  ins: 'install',\n  inst: 'install',\n  insta: 'install',\n  instal: 'install',\n  isnt: 'install',\n  isnta: 'install',\n  isntal: 'install',\n  isntall: 'install',\n  'install-clean': 'ci',\n  'isntall-clean': 'ci',\n  hlep: 'help',\n  'dist-tags': 'dist-tag',\n  upgrade: 'update',\n  udpate: 'update',\n  login: 'adduser',\n  'add-user': 'adduser',\n  author: 'owner',\n  home: 'docs',\n  issues: 'bugs',\n  info: 'view',\n  show: 'view',\n  find: 'search',\n  add: 'install',\n  unlink: 'uninstall',\n  remove: 'uninstall',\n  rm: 'uninstall',\n  r: 'uninstall',\n  rum: 'run-script',\n  sit: 'cit',\n  urn: 'run-script',\n  ogr: 'org',\n}\n\n// these are filenames in .\nconst cmdList = [\n  'ci',\n  'install-ci-test',\n  'install',\n  'install-test',\n  'uninstall',\n  'cache',\n  'config',\n  'set',\n  'get',\n  'update',\n  'outdated',\n  'prune',\n  'pack',\n  'find-dupes',\n  'dedupe',\n  'hook',\n\n  'rebuild',\n  'link',\n\n  'publish',\n  'star',\n  'stars',\n  'unstar',\n  'adduser',\n  'login', // This is an alias for `adduser` but it can be confusing\n  'logout',\n  'unpublish',\n  'owner',\n  'access',\n  'team',\n  'deprecate',\n  'shrinkwrap',\n  'token',\n  'profile',\n  'audit',\n  'fund',\n  'org',\n\n  'help',\n  'ls',\n  'll',\n  'search',\n  'view',\n  'init',\n  'version',\n  'edit',\n  'explore',\n  'docs',\n  'repo',\n  'bugs',\n  'root',\n  'prefix',\n  'bin',\n  'whoami',\n  'diff',\n  'dist-tag',\n  'ping',\n  'pkg',\n\n  'test',\n  'stop',\n  'start',\n  'restart',\n  'run-script',\n  'set-script',\n  'completion',\n  'doctor',\n  'exec',\n  'explain',\n]\n\nconst plumbing = ['birthday', 'help-search']\n\n// these commands just shell out to something else or handle the\n// error themselves, so it's confusing and weird to write out\n// our full error log banner when they exit non-zero\nconst shellouts = [\n  'exec',\n  'run-script',\n  'test',\n  'start',\n  'stop',\n  'restart',\n  'birthday',\n]\n\nmodule.exports = {\n  aliases: Object.assign({}, shorthands, affordances),\n  shorthands,\n  affordances,\n  cmdList,\n  plumbing,\n  shellouts,\n}\n"]}